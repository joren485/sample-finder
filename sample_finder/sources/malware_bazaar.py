import io
import zipfile
from pathlib import Path

import requests
from loguru import logger
import pyzipper

from sample_finder.sources.source import Source
from sample_finder.validators import verify_sha256


class SourceMalwareBazaar(Source):
    NAME = "malware_bazaar"
    URL_API = "https://mb-api.abuse.ch/api/v1/"

    PASSWORD_ZIP = b"infected"

    def __init__(self, config: dict) -> None:
        super().__init__(config)
        self._session.headers.update({"API-KEY": self._config["api_key"]})

    def _get_sha256(self, sample_hash: str) -> str | None:
        if not verify_sha256(sample_hash):
            response = self._session.post(
                self.URL_API,
                data={
                    "query": "get_info",
                    "hash": sample_hash,
                },
            )

            if not response or not response.ok:
                return None

            response_json = response.json()

            if response_json["query_status"] != "ok":
                return None

            return response_json["sha256_hash"]

        return sample_hash

    def download_file(self, sample_hash: str, output_path: Path) -> bool:
        sample_hash = self._get_sha256(sample_hash)
        if not sample_hash:
            return False

        response = self._post(
            self.URL_API,
            data={
                "query": "get_file",
                "sha256_hash": sample_hash,
            },
        )
        if not response or not response.ok:
            return False

        if response.headers["content-type"] != "application/zip":
            return False

        data = self._decrypt_zip(response.content)
        with output_path.open("wb") as h_file:
            h_file.write(data)

        return True
